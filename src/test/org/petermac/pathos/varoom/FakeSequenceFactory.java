package test.org.petermac.pathos.varoom;

import org.petermac.pathos.varoom.Fasta;
import org.petermac.pathos.varoom.FileFactory;
import org.petermac.pathos.varoom.SequenceFactory;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class FakeSequenceFactory extends SequenceFactory {
    public static class Fragment {
        final int position;
        final String sequence;

        Fragment(int position, String sequence) {
            this.position = position;
            this.sequence = sequence;
        }
    }

    public static class Fragments extends ArrayList<Fragment> {}

    Map<String,Integer> sizes;
    Map<String,Fragments> fragments;

    public FakeSequenceFactory() {
        super(null, null);
        
        sizes = new HashMap<>();
        sizes.put("chr1", 249250621);
        sizes.put("chr2", 243199373);
        sizes.put("chr3", 198022430);
        sizes.put("chr4", 191154276);
        sizes.put("chr5", 180915260);
        sizes.put("chr6", 171115067);
        sizes.put("chr7", 159138663);
        sizes.put("chr8", 146364022);
        sizes.put("chr9", 141213431);
        sizes.put("chr10", 135534747);
        sizes.put("chr11", 135006516);
        sizes.put("chr12", 133851895);
        sizes.put("chr13", 115169878);
        sizes.put("chr14", 107349540);
        sizes.put("chr15", 102531392);
        sizes.put("chr16", 90354753);
        sizes.put("chr17", 81195210);
        sizes.put("chr18", 78077248);
        sizes.put("chr19", 59128983);
        sizes.put("chr20", 63025520);
        sizes.put("chr21", 48129895);
        sizes.put("chr22", 51304566);
        sizes.put("chrX", 155270560);
        sizes.put("chrY", 59373566);

        fragments = new HashMap<>();
        fragments.put("chr1", new Fragments());
        fragments.get("chr1").add(new Fragment(33476332,
                "TCACCCTGACCACCCTTCCCCTCTGCCCAGCACCTAAGAGCAGGGATCACGCCGCGGGGTGATGAGCAGTGTTGCAGTCTCGCCTGGCCTTCTGATACTAGGCTGAAATAGAGAGGAAACAAGAGAGAACAAAATGGGTTTTTAAAAACCAAGTACATATCAGAGGAGGCTGGCATGTAAGCCCCAGCAACCAAATGCATTAAACACTGGACATTTCTGTGACAGGTAAAAGCAGAACCTGCTGAGGCTGAGGAACTCTGGAATTAAATGAAGCAAAAACAGAATCCTAACCATACTGAGAAGGGTATATGCATTCCCTATGAATCTTCCAGTTCTTATGGGCAGCCCAAATATTACTTGTACATGTTGTATGCACACGTGAATCTATGTGGACGGATGACAAATATTTGGGCAAGGATCATGCACATAAAATTAGCAAACATTCAAGAACCTCAACTTTGAGGCCAAGTGCTTACAATTGTCCCTAGTTAAAGGGGAGCTGATTCTAAGATTCATGATGCCACTGTCACCCAGAGAAGGATCCCAGACCAGGCACACATAGCTGACAGTTTTTGTTTCACTCCTCTTCCTTGCCCATTCCCAGAAGTCATGTGCTTCCCAGAAACACACAAAGCCAGACTGAGTTTCCATTAAGAGTGGGTGGAGTTGGTTTAGAGCCAGGAAAACAAGGCAGGACAGAGGCAGCAGACACTCACTTGGACCAGGCAAAGAGGGAAGCAAGGTGGCCAGGTACTCATGCCCAGTTGCCATGTGGACAGCAGATAAGACCTCTGGTAGTCTCACAGATGGCAGGAGAGCTCAGGTCAGGAGGCTGGGCACTTTAGAGTCCACTGAATCGAGTCAGCAGCAGATTATGCTGAGGCTGGCGATATTATTTACTGGATCTGCCACTGACTTTCTAATGGTTTTTCCAGAGGCTGCCGTTTTTGTGGTCCTTCATAGCAGTCTGTTACTTCATCTGTTTGCCACAAATCAAACCAGAGACCAAAAGACAGCAGGGACCTTAGAAAATGCTCAATAGTTGGGAAGCTAAGGTTATGAATAAAAGCTGGTAACTGTCACAGGTGGTCTTATTTCTGGGTGATCTTTTCTTGGGGAAGTCCATGGCTATAGCCATCATAAAATTAGGGGTGAAGGGTTGGATCTAGAAAGGAGAGGGTTTGGGCTTAAAAAGAACATATCTGATTTCAGTTTTATGTCCTGGAGAGAGACTGGGTTTGAATAAATACTGATCAAAATGAATCCAAGAATAGATCACACACTGTTTTGTTCACACTTGGAAACACAGGCAAACATTAAAAATAAAAGCAAATAAACCTACCCTGGTCTCTTTTTGGGGAAGTAGATTTGACTGCTCTCAGATGATCAGCCTGGATGTTCAGAAGACAATCTGAATTCAAAAGGACCTTTCACCTGGTTTAATTCTCTGGCAACAATTCAGTTTTCAAACCCAATTCCCAAATAATTGCTATTTTCAGCATCATGATGCAGATCACAAAAATATTCCAATTTGGCCTGGCTCTTTTTATGACGATATCCTCTCCCAGTAATTTCTGTAACCTGCAAAGTAAGTGCCTTTTTCCTTCCACCTAGGGGGAAAAAATTAATGATCCCTGTTCACACACTGACTCACGTGGGTTTTCATCATGGGTTAGAAAACAAAATGGAATTCTCTGTCCATAATGTGCCATCAGGAACTGTGACCCTGCCTGACTTCACATGATCCTGGACTTCTAATCAGCTGCTGGAAATGGAAGAAATACTATGAGGTTCTGGAATTGCGGTCCCTGGAAGATTACCTGGGTTAGTTCATTTTGGTCAAAAAATAAAATCAAAAGTATGGTTAAAGAAGTAAACAGCTGGGCTGGGTGTAGTGGCTCACGTCTGTGATCCTGGCACTTCAGGAGGCCAAGGTGGGTGGATTGCTTAAGCCTAGGAGTTCAAGACCAGCCTGGGCAACTTGGCAAAATCCTGTCTCTACAAAAAATACAAATATCAGCCAGGTGTTGTGGCATGCACCTGTAGTCCCAGCTGCTCAGGAGGCTGAGGTGGGATAATTGCTTGAGCCCCAGGAGGCAG"));
    }

    public Fasta getAccession(String accession) {
        assert sizes.containsKey(accession);
        int n = sizes.get(accession);
        StringBuilder bldr = new StringBuilder(n);
        bldr.setLength(n);
        if (fragments.containsKey(accession)) {
            for(Fragment frag : fragments.get(accession)) {
                int m = frag.sequence.length();
                bldr.replace(frag.position, frag.position+m, frag.sequence);
            }
        }
        return new Fasta(accession, bldr.toString());
    }
    
}
